#!/bin/bash

# Copyright (c) 2012 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


. "$(dirname "$0")/common.sh" || exit 1

# Script must run inside the chroot
assert_inside_chroot "$@"

# Do not run as root
assert_not_root_user

# Developer-visible flags.
DEFINE_boolean usepkg $FLAGS_TRUE \
  "Use binary packages to bootstrap."
DEFINE_boolean getbinpkg $FLAGS_TRUE \
  "Download binary packages from remote repository."

FLAGS_HELP="usage: $(basename $0) [flags]
Performs an update of the chroot. This script is called as part of
build_packages, so there is typically no need to call this script directly.
"
show_help_if_requested "$@"

# The following options are advanced options, only available to those willing
# to read the source code. They are not shown in help output, since they are
# not needed for the typical developer workflow.
DEFINE_integer jobs "${NUM_JOBS}" \
  "How many packages to build in parallel at maximum."
DEFINE_boolean skip_toolchain_update $FLAGS_FALSE \
  "Don't update the toolchains."
DEFINE_string toolchain_boards "" \
  "Extra toolchains to setup for the specified boards."

DEFINE_string extra_portdir_overlay_dir "" \
  "Extra directory path to be added to PORTDIR_OVERLAY."

# Parse command line flags
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

# Only now can we die on error.  shflags functions leak non-zero error codes,
# so will die prematurely if 'switch_to_strict_mode' is specified before now.
switch_to_strict_mode

. "${BUILD_LIBRARY_DIR}/toolchain_util.sh"

PORTAGE_STABLE_OVERLAY="/usr/local/portage/stable"
CROSSDEV_OVERLAY="/usr/local/portage/crossdev"
COREOS_OVERLAY="/usr/local/portage/coreos"
COREOS_CONFIG="${COREOS_OVERLAY}/coreos/config"
if [[ -n "${FLAGS_extra_portdir_overlay_dir}" ]]; then
  EXTRA_PORTDIR_OVERLAY="${FLAGS_extra_portdir_overlay_dir}"
else
  EXTRA_PORTDIR_OVERLAY=""
fi

info "Setting up portage..."
sudo mkdir -p "/etc/portage/repos.conf/"
sudo rm -f "/etc/portage/make.conf"
sudo touch "/etc/portage/make.conf.user"

sudo_clobber "/etc/portage/make.conf" <<EOF
# Created by update_chroot
PORTDIR="${PORTAGE_STABLE_OVERLAY}"
PORTDIR_OVERLAY="${CROSSDEV_OVERLAY} ${COREOS_OVERLAY} ${EXTRA_PORTDIR_OVERLAY}"
DISTDIR="/var/lib/portage/distfiles"
PKGDIR="/var/lib/portage/pkgs"
PORT_LOGDIR="/var/log/portage"
PORTAGE_BINHOST="$(get_sdk_binhost)"
MAKEOPTS="--jobs=${NUM_JOBS} --load-average=$((NUM_JOBS * 2))"

# Generally there isn't any need to add packages to @world by default.
# You can use --select to override this.
EMERGE_DEFAULT_OPTS="--oneshot"

# Allow the user to override or define additional settings.
source "/etc/portage/make.conf.user"
EOF

sudo_clobber "/etc/portage/repos.conf/coreos.conf" <<EOF
[DEFAULT]
main-repo = portage-stable

[gentoo]
disabled = true

[coreos]
location = ${COREOS_OVERLAY}

[portage-stable]
location = ${PORTAGE_STABLE_OVERLAY}
EOF

sudo eselect profile set --force "$(get_sdk_profile)"

# Create crossdev repo_name and metadata
info "Setting up crossdev..."
sudo mkdir -p "${FLAGS_chroot}/${CROSSDEV_OVERLAY}/profiles"
echo "x-crossdev" | \
    sudo tee "/${CROSSDEV_OVERLAY}/profiles/repo_name" > /dev/null

sudo mkdir -p "/${CROSSDEV_OVERLAY}/metadata"
sudo tee "/${CROSSDEV_OVERLAY}/metadata/layout.conf" > /dev/null <<EOF
masters = portage-stable coreos
use-manifests = true
thin-manifests = true
EOF

# Run version hooks as pre-update
if [[ -f /etc/os-release ]]; then
  OLDVER=$(grep "^VERSION=" /etc/os-release | cut -d = -f 2-)
else
  OLDVER="0.0.0"
fi

info "Updating chroot:"
info " chroot version: $OLDVER"
info " CoreOS version: $COREOS_VERSION_STRING"

# Updates should be of the form 1.2.3_desc.sh
for update_script in ${SCRIPTS_DIR}/sdk_lib/updates/*.sh; do
  update_name="${update_script##*/}"
  update_ver="${update_name%%_*}"
  # Run newer updates but don't pass our current version
  if ! cmp_ver le "$update_ver" "$COREOS_VERSION_STRING"; then
      warn "Skipping update from the future: $update_name"
      warn "Perhaps it is time to run a repo sync?"
  elif ! cmp_ver ge "$OLDVER" "$update_ver"; then
      info "Running chroot update $update_name"
      bash -e "$update_script" || die "Update failed: $update_name"
  fi
done

"${BUILD_LIBRARY_DIR}/set_lsb_release" --root /

EMERGE_FLAGS="-uNv --with-bdeps=y --select"
if [ "${FLAGS_usepkg}" -eq "${FLAGS_TRUE}" ]; then
  EMERGE_FLAGS="${EMERGE_FLAGS} --usepkg"
  if [ "${FLAGS_getbinpkg}" -eq "${FLAGS_TRUE}" ]; then
    EMERGE_FLAGS="${EMERGE_FLAGS} --getbinpkg"
  fi

  # Only update toolchain when binpkgs are available.
  EMERGE_FLAGS+=" $(get_binonly_args $(get_chost_list))"
fi

if [[ "${FLAGS_jobs}" -ne -1 ]]; then
  EMERGE_FLAGS+=" --jobs=${FLAGS_jobs}"
fi

# Perform an update of coreos-devel/sdk-depends and world in the chroot.
EMERGE_CMD="emerge"

# In first pass, update portage and toolchains. Lagged updates of both
# can cause serious issues later.
info "Updating basic system packages"
sudo -E ${EMERGE_CMD} --quiet ${EMERGE_FLAGS} \
    dev-util/ccache \
    sys-apps/portage \
    sys-devel/crossdev \
    sys-devel/sysroot-wrappers \
    sys-libs/nss-usrfiles \
    "${TOOLCHAIN_PKGS[@]}"

gcc_set_latest_profile "$(portageq envvar CHOST)"

if [[ "${FLAGS_skip_toolchain_update}" -eq "${FLAGS_FALSE}" && \
      -n "${FLAGS_toolchain_boards}" ]]; then
  CROSS_CHOSTS=( $(get_board_chost ${FLAGS_toolchain_boards} | sort -u) )

  for cross_chost in "${CROSS_CHOSTS[@]}"; do
    info "Updating cross ${cross_chost} toolchain"
    install_cross_toolchain "${cross_chost}" --quiet ${EMERGE_FLAGS}
  done
fi

# Build cros_workon packages when they are changed.
CHROMITE_BIN="${GCLIENT_ROOT}/chromite/bin"
for pkg in $("${CHROMITE_BIN}/cros_list_modified_packages" --host); do
  EMERGE_FLAGS+=" --reinstall-atoms=${pkg} --usepkg-exclude=${pkg}"
done

# Second pass, update everything else.
EMERGE_FLAGS+=" --deep"
info "Updating all SDK packages"
sudo -E ${EMERGE_CMD} ${EMERGE_FLAGS} \
    coreos-devel/sdk-depends world

# Automatically discard all CONFIG_PROTECT'ed files. Those that are
# protected should not be overwritten until the variable is changed.
# Autodiscard is option "-9" followed by the "YES" confirmation.
printf '%s\nYES\n' -9 | sudo etc-update

# If the user still has old perl modules installed, update them.
PERL_VERSIONS=$(find /usr/lib*/perl5/vendor_perl/ -maxdepth 1 -mindepth 1 \
  -type d -printf '%P\n' | sort -u | wc -w)
if [ "$PERL_VERSIONS" -gt 1 ] ; then
  sudo perl-cleaner --all -- --quiet
fi

# Old $PS1 customization that doesn't work any more
if [[ -e /etc/profile.d/coreos-niceties.sh ]]; then
  sudo rm -f /etc/profile.d/coreos-niceties.sh
fi

command_completed
